/* Copyright 2019 David Conran

  An IR LED circuit *MUST* be connected to the ESP8266 on a pin
  as specified by kIrLed below.

  TL;DR: The IR LED needs to be driven by a transistor for a good result.

  Suggested circuit:
      https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-sending

  Common mistakes & tips:
*   * Don't just connect the IR LED directly to the pin, it won't
      have enough current to drive the IR LED effectively.
*   * Make sure you have the IR LED polarity correct.
      See: https://learn.sparkfun.com/tutorials/polarity/diode-and-led-polarity
*   * Typical digital camera/phones can be used to see if the IR LED is flashed.
      Replace the IR LED with a normal LED if you don't have a digital camera
      when debugging.
*   * Avoid using the following pins unless you really know what you are doing:
*     * Pin 0/D3: Can interfere with the boot/program mode & support circuits.
*     * Pin 1/TX/TXD0: Any serial transmissions from the ESP8266 will interfere.
*     * Pin 3/RX/RXD0: Any serial transmissions to the ESP8266 will interfere.
*   * ESP-01 modules are tricky. We suggest you use a module with more GPIOs
      for your first time. e.g. ESP-12 etc.
*/
// #include <Arduino.h>
// #include <IRremoteESP8266.h>
//FOR NIKAI TV
#include <IRsend.h>

// sample data at the very below

//const uint16_t kIrLed = 4;          // ESP8266 GPIO pin to use. Recommended: 4 (D4).
IRsend irsend(kIrLed);

void Nikai_TV_setup() {
  irsend.begin();
}

void Nikai_TV_handle(int TVcommand) { // receives from io.h
  switch (TVcommand) {
    case 1:
      irsend.sendNikai(0xD5F2A);      // toggle on/off
      break;
    case 2:
      irsend.sendNikai(0xD5F2A);      // toggle on/off
      break;
  }
}

//TCL TV: //ASSIGN TO MY TV
//Protocol  : NIKAI
//on7off:
//Code      : 0xD5F2A (24 Bits)
//uint16_t rawData[51] = {3954, 3974,  502, 1986,  500, 1986,  472, 1986,  498, 1988,  474, 1040,  452, 1040,  452, 1988,  500, 1038,  452, 2008,  478, 1014,  478, 1986,  476, 1038,  452, 1040,  476, 1016,  478, 1014,  476, 1016,  476, 1986,  478, 1984,  500, 1014,  476, 1986,  500, 1014,  478, 1988,  474, 1038,  452, 1986,  502};  // NIKAI D5F2A
//uint64_t data = 0xD5F2A;
//
//toggle through input source:
//Code      : 0x5CFA3 (24 Bits)
//uint16_t rawData[155] = {3958, 3976,  502, 1984,  474, 1986,  502, 1986,  500, 1988,  472, 1988,  500, 1014,  474, 1988,  474, 1044,  474, 1016,  476, 1018,  476, 1984,  474, 1990,  498, 1014,  476, 1014,  478, 1040,  448, 1042,  450, 1044,  450, 1984,  500, 1014,  476, 1986,  500, 1988,  474, 1986,  500, 1016,  474, 1016,  476, 7746,  3956, 3978,  500, 1984,  474, 1990,  498, 1988,  500, 1988,  472, 1988,  498, 1018,  474, 1986,  474, 1042,  448, 1044,  474, 1016,  476, 1986,  474, 1986,  500, 1014,  480, 1012,  476, 1016,  476, 1042,  448, 1040,  452, 1988,  496, 1016,  476, 1986,  476, 1986,  500, 1986,  502, 1016,  476, 1014,  478, 7744,  3956, 3976,  500, 1984,  474, 1990,  498, 1984,  474, 1986,  500, 1988,  498, 1016,  474, 1988,  476, 1040,  452, 1040,  452, 1040,  478, 1984,  474, 1986,  500, 1016,  474, 1018,  476, 1016,  476, 1016,  476, 1042,  450, 1986,  502, 1014,  476, 1986,  474, 1988,  498, 1988,  498, 1016,  476, 1014,  478};  // NIKAI 5CFA3
//uint64_t data = 0x5CFA3;
//
//toggle mute:
//Code      : 0xC0F3F (24 Bits)
//uint16_t rawData[207] = {3982, 3976,  474, 2010,  476, 1988,  500, 1986,  474, 1986,  502, 1014,  476, 1014,  478, 1984,  474, 1986,  502, 1986,  500, 1986,  476, 1986,  500, 1984,  474, 1042,  452, 1038,  476, 1016,  476, 1016,  476, 1988,  478, 1984,  496, 1014,  478, 1016,  474, 1044,  450, 1040,  450, 1044,  448, 1042,  448, 7614,  3948, 3976,  498, 1988,  474, 1986,  498, 1988,  474, 1986,  500, 1014,  478, 1014,  478, 1986,  502, 1988,  476, 1982,  498, 1988,  472, 2010,  478, 1988,  500, 1014,  476, 1014,  478, 1014,  476, 1014,  476, 1988,  472, 1988,  498, 1044,  448, 1042,  450, 1042,  448, 1042,  450, 1040,  452, 1040,  478, 7564,  3956, 4002,  476, 2006,  478, 1986,  478, 2006,  478, 1988,  498, 1014,  480, 1012,  478, 1988,  474, 1984,  502, 1984,  474, 2008,  478, 1988,  500, 1984,  476, 1040,  452, 1040,  452, 1040,  452, 1040,  478, 2010,  452, 1986,  498, 1014,  478, 1014,  476, 1014,  476, 1016,  478, 1040,  452, 1040,  452, 7588,  3956, 3976,  500, 1988,  474, 1988,  500, 1986,  498, 1988,  474, 1040,  452, 1040,  452, 2008,  478, 1988,  498, 1986,  474, 1988,  500, 1984,  474, 1988,  498, 1014,  476, 1014,  480, 1040,  450, 1040,  450, 2010,  478, 1986,  474, 1038,  454, 1038,  478, 1014,  478, 1014,  476, 1012,  478, 1014,  478};  // NIKAI C0F3F
//uint64_t data = 0xC0F3F;
//
//USB:
//Code      : 0xFDF02 (24 Bits)
//uint16_t rawData[207] = {3958, 3974,  500, 1988,  472, 1988,  498, 1990,  498, 1986,  476, 1040,  450, 1042,  452, 1040,  450, 1040,  450, 1042,  476, 1016,  478, 2010,  450, 1042,  448, 1042,  450, 1042,  450, 1042,  474, 1016,  476, 1988,  472, 1986,  502, 1988,  472, 1988,  500, 1986,  500, 1988,  474, 1040,  448, 1988,  498, 7722,  3956, 4004,  472, 1988,  500, 1986,  476, 1984,  500, 1986,  502, 1014,  474, 1016,  474, 1016,  476, 1018,  474, 1016,  474, 1042,  448, 1988,  498, 1016,  476, 1014,  478, 1014,  476, 1016,  474, 1042,  452, 1986,  500, 1986,  474, 1988,  500, 1986,  474, 1988,  498, 1988,  498, 1018,  474, 1986,  474, 7746,  3956, 3976,  500, 1990,  474, 1982,  502, 1986,  502, 1986,  474, 1040,  450, 1042,  450, 1040,  450, 1042,  450, 1040,  474, 1016,  478, 1984,  474, 1044,  448, 1042,  450, 1040,  450, 1040,  478, 1014,  476, 1986,  474, 1986,  502, 1984,  476, 1986,  498, 1988,  498, 1988,  474, 1042,  450, 1986,  500, 7722,  3954, 4002,  476, 1984,  500, 1986,  472, 1990,  498, 1988,  500, 1012,  476, 1016,  474, 1018,  476, 1016,  474, 1018,  474, 1048,  444, 1988,  500, 1014,  476, 1016,  474, 1018,  474, 1018,  474, 1042,  448, 1990,  498, 1988,  472, 1984,  502, 1986,  474, 1986,  502, 1984,  500, 1018,  474, 1986,  474};  // NIKAI FDF02
//uint64_t data = 0xFDF02;
//
//lower volume:
//Code      : 0xD0F2F (24 Bits)
//uint16_t rawData[103] = {3952, 3978,  500, 1988,  472, 1988,  498, 1986,  500, 1988,  472, 1042,  448, 1044,  448, 1988,  500, 1014,  476, 1984,  502, 1982,  478, 1984,  502, 1986,  472, 1042,  452, 1040,  478, 1014,  474, 1016,  474, 1988,  472, 1986,  500, 1018,  474, 1988,  496, 1016,  476, 1014,  476, 1016,  476, 1016,  474, 40576,  3958, 4000,  474, 1988,  500, 1986,  474, 1984,  502, 1984,  500, 1016,  476, 1018,  474, 1986,  474, 1042,  448, 1986,  502, 1986,  500, 1986,  474, 1988,  498, 1016,  476, 1016,  476, 1014,  476, 1040,  450, 1986,  500, 1986,  476, 1042,  450, 1986,  498, 1016,  474, 1042,  450, 1042,  450, 1040,  452};  // NIKAI D0F2F
//uint64_t data = 0xD0F2F;
//
//increase volume:
//Code      : 0xD0F2F (24 Bits)
//uint16_t rawData[155] = {3956, 3978,  472, 1988,  500, 1988,  498, 1986,  476, 1986,  500, 1018,  474, 1016,  476, 1986,  502, 1014,  474, 1988,  474, 1986,  498, 1990,  470, 1986,  502, 1016,  474, 1042,  450, 1042,  448, 1044,  448, 1986,  500, 1986,  474, 1042,  476, 1986,  476, 1042,  450, 1040,  452, 1040,  448, 1042,  448, 7588,  3956, 4004,  474, 1988,  500, 1986,  474, 1988,  498, 1988,  474, 1044,  474, 1014,  476, 1984,  476, 1042,  450, 1988,  500, 1984,  474, 1988,  498, 1988,  500, 1016,  476, 1014,  476, 1016,  476, 1014,  476, 1986,  500, 1986,  476, 1040,  452, 1984,  500, 1018,  474, 1016,  476, 1018,  474, 1042,  450, 17672,  3954, 4002,  474, 1986,  500, 1984,  478, 1986,  500, 1986,  500, 1016,  474, 1018,  474, 1988,  474, 1040,  450, 1986,  500, 1990,  496, 1988,  474, 1984,  500, 1016,  476, 1016,  474, 1016,  476, 1016,  478, 1984,  500, 1988,  474, 1042,  448, 1988,  498, 1016,  476, 1014,  476, 1042,  450, 1042,  450};  // NIKAI D0F2F
//uint64_t data = 0xD0F2F;
//
//Haier AC:
//Timestamp : 010828.680
//Library   : v2.8.4
//
//Protocol  : HAIER_AC_YRW02
//Code      : 0xA6600000004000800000000005CB (112 Bits)
//Mesg Desc.: Model: 1 (V9014557-A), Power: Off, Button: 5 (Power), Mode: 4 (Heat), Temp: 22C, Fan: 2 (Medium), Turbo: Off, Quiet: Off, Swing(V): 0 (Off), Swing(H): 0 (Middle), Sleep: Off, Health: Off, Timer Mode: 0 (N/A), On Timer: Off, Off Timer: Off, Lock: Off
//uint16_t rawData[229] = {2990, 3108,  2992, 4508,  508, 1682,  566, 544,  510, 1680,  564, 544,  510, 572,  564, 1654,  512, 1680,  508, 574,  568, 540,  536, 1680,  544, 1652,  506, 572,  564, 546,  532, 560,  554, 546,  532, 576,  512, 572,  562, 544,  534, 556,  526, 572,  566, 542,  534, 558,  530, 568,  532, 560,  530, 568,  570, 538,  530, 560,  560, 538,  572, 536,  508, 582,  564, 538,  532, 558,  560, 540,  568, 542,  530, 560,  560, 540,  568, 540,  530, 562,  530, 570,  528, 560,  556, 544,  568, 1632,  530, 570,  566, 542,  504, 586,  558, 542,  566, 524,  530, 570,  568, 540,  506, 584,  530, 572,  566, 542,  502, 584,  552, 550,  566, 524,  558, 542,  568, 1632,  554, 546,  570, 538,  480, 608,  562, 538,  566, 542,  488, 594,  570, 538,  504, 584,  560, 542,  572, 536,  478, 610,  560, 544,  564, 544,  480, 600,  568, 540,  480, 610,  558, 544,  566, 542,  478, 610,  532, 570,  566, 546,  478, 602,  568, 540,  480, 610,  556, 546,  568, 538,  480, 606,  532, 570,  568, 540,  482, 602,  568, 540,  480, 606,  558, 548,  566, 540,  482, 604,  536, 568,  570, 540,  506, 576,  566, 542,  484, 602,  560, 544,  568, 542,  508, 576,  562, 544,  566, 1628,  560, 544,  482, 1708,  508, 1684,  528, 1682,  546, 538,  532, 558,  560, 1674,  482, 586,  560, 1654,  510, 1680,  506};  // HAIER_AC_YRW02
//uint8_t state[14] = {0xA6, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0xCB};
//
//
//Timestamp : 010866.780
//Library   : v2.8.4
//
//Protocol  : HAIER_AC_YRW02
//Code      : 0xA6680000C0400080000000000593 (112 Bits)
//Mesg Desc.: Model: 1 (V9014557-A), Power: On, Button: 5 (Power), Mode: 4 (Heat), Temp: 22C, Fan: 2 (Medium), Turbo: Off, Quiet: Off, Swing(V): 8 (UNKNOWN), Swing(H): 0 (Middle), Sleep: Off, Health: Off, Timer Mode: 0 (N/A), On Timer: Off, Off Timer: Off, Lock: Off
//uint16_t rawData[229] = {3016, 3082,  3018, 4480,  510, 1682,  534, 576,  510, 1680,  534, 560,  528, 570,  568, 1650,  508, 1684,  508, 572,  570, 540,  532, 1662,  566, 1634,  554, 544,  572, 1628,  554, 546,  570, 520,  530, 570,  566, 544,  506, 584,  558, 542,  570, 540,  506, 582,  556, 546,  566, 520,  562, 540,  570, 540,  504, 586,  558, 542,  568, 540,  506, 584,  558, 542,  568, 522,  532, 570,  570, 1650,  508, 1686,  476, 608,  560, 542,  568, 540,  478, 608,  558, 546,  478, 610,  558, 542,  570, 1630,  534, 568,  570, 540,  476, 610,  532, 570,  568, 520,  560, 542,  564, 546,  478, 608,  534, 572,  566, 542,  478, 608,  530, 574,  568, 518,  534, 572,  564, 1632,  560, 542,  568, 540,  482, 604,  562, 542,  570, 540,  506, 574,  566, 542,  480, 606,  534, 570,  570, 540,  506, 578,  564, 540,  566, 546,  508, 572,  568, 542,  508, 576,  560, 544,  568, 540,  506, 578,  560, 544,  564, 544,  508, 574,  568, 542,  508, 576,  560, 546,  566, 544,  510, 574,  562, 544,  566, 542,  512, 570,  566, 544,  510, 574,  564, 540,  568, 542,  510, 574,  536, 570,  536, 572,  512, 568,  568, 544,  510, 574,  566, 538,  542, 568,  540, 544,  536, 570,  536, 1656,  564, 540,  510, 1664,  530, 1682,  502, 584,  530, 570,  570, 1630,  530, 572,  566, 540,  478, 1714,  480, 1714,  564};  // HAIER_AC_YRW02
//uint8_t state[14] = {0xA6, 0x68, 0x00, 0x00, 0xC0, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x93};
